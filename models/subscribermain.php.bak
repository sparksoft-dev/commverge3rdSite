<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Subscribermain extends CI_Model {
	private $utility;
	private $extras;
	private $TABLENAME = 'TBLCUSTOMER';
	private $COLUMN_USERIDENTITY = 'USER_IDENTITY';
	private $COLUMN_USERNAME = 'USERNAME';
	private $COLUMN_BANDWIDTH = 'BANDWIDTH';
	private $COLUMN_CUSTOMERSTATUS = 'CUSTOMERSTATUS';
	private $COLUMN_PASSWORD = 'PASSWORD';
	private $COLUMN_CUSTOMERREPLYITEM = 'CUSTOMERREPLYITEM';
	private $COLUMN_CREATEDATE = 'CREATEDATE';
	private $COLUMN_LASTMODIFIEDDATE = 'LASTMODIFIEDDATE';
	private $COLUMN_RADIUSPOLICY = 'RADIUSPOLICY';
	private $COLUMN_RBCUSTOMERNAME = 'RBCUSTOMERNAME';
	private $COLUMN_RBCREATEDBY = 'RBCREATEDBY';
	private $COLUMN_RBADDITIONALSERVICE5 = 'RBADDITIONALSERVICE5';
	private $COLUMN_RBADDITIONALSERVICE4 = 'RBADDITIONALSERVICE4';
	private $COLUMN_RBADDITIONALSERVICE3 = 'RBADDITIONALSERVICE3';
	private $COLUMN_RBADDITIONALSERVICE2 = 'RBADDITIONALSERVICE2';
	private $COLUMN_RBADDITIONALSERVICE1 = 'RBADDITIONALSERVICE1';
	private $COLUMN_RBCHANGESTATUSDATE = 'RBCHANGESTATUSDATE';
	private $COLUMN_RBCHANGESTATUSBY = 'RBCHANGESTATUSBY';
	private $COLUMN_RBACTIVATEDDATE = 'RBACTIVATEDDATE';
	private $COLUMN_RBACTIVATEDBY = 'RBACTIVATEDBY';
	private $COLUMN_RBACCOUNTSTATUS = 'RBACCOUNTSTATUS';
	private $COLUMN_RBSVCCODE2 = 'RBSVCCODE2';
	private $COLUMN_RBSVCCODE = 'RBSVCCODE';
	private $COLUMN_CUSTOMERTYPE = 'CUSTOMERTYPE';
	private $COLUMN_RBSERVICENUMBER = 'RBSERVICENUMBER';
	private $COLUMN_RBCHANGESTATUSFROM = 'RBCHANGESTATUSFROM';
	private $COLUMN_RBSECONDARYACCOUNT = 'RBSECONDARYACCOUNT';
	private $COLUMN_RBUNLIMITEDACCESS = 'RBUNLIMITEDACCESS';
	private $COLUMN_RBTIMESLOT = 'RBTIMESLOT';
	private $COLUMN_RBORDERNUMBER = 'RBORDERNUMBER';
	private $COLUMN_RBREMARKS = 'RBREMARKS';
	private $COLUMN_RBREALM = 'RBREALM';
	private $COLUMN_RBNUMBEROFSESSION = 'RBNUMBEROFSESSION';
	private $COLUMN_RBMULTISTATIC = 'RBMULTISTATIC';
	private $COLUMN_RBIPADDRESS = 'RBIPADDRESS';
	private $COLUMN_RBENABLED = 'RBENABLED';
	private $PASSWORD_LENGTH = 12;
	public $STATUSES = ['A', 'D', 'T', 'Active', 'InActive'];
	
	//defaults (not used anymore, moved to settings.txt file)
	private $NPM_URI = '10.174.241.65:8080/NPM_API-11.1.1.5/';
	private $NPM_URL = '10.174.241.65:8080/NPM_API-11.1.1.5/user_mgmt?WSDL';
	private $NPM_LOGIN = 'lek';
	private $NPM_PASSWORD = 'lek';
	private $NPM_TIMEOUT = 10;

	public $DEFAULT_COLUMNS = ['ACCOUNT TYPE', 'REALM', 'USERNAME', 'ACCOUNT PLAN', 'STATUS', 'SERVICE', 'ADDITIONAL SERVICE 1', 'ADDITIONAL SERVICE 2',
        'ORDER NUMBER', 'SERVICE NUMBER', 'CUSTOMER NAME', 'IP ADDRESS', 'NET ADDRESS', 'REMARKS'];

	function __construct() {
		parent::__construct();
		$this->utility = $this->load->database('utility', true);
		$this->extras = $this->load->database('extras', true);
	}

	public function create($s) {
		$this->utility->db_select();
		$now = date('Y-m-d H:i:s', mktime());
		$query = "insert into TBLCUSTOMER (CUI, USER_IDENTITY, USERNAME, BANDWIDTH, CUSTOMERSTATUS, PASSWORD, CUSTOMERREPLYITEM, CREATEDATE, LASTMODIFIEDDATE, RADIUSPOLICY, ".
			"RBCUSTOMERNAME, RBCREATEDBY, RBADDITIONALSERVICE5, RBADDITIONALSERVICE4, RBADDITIONALSERVICE3, RBADDITIONALSERVICE2, RBADDITIONALSERVICE1, RBCHANGESTATUSDATE, ".
			"RBCHANGESTATUSBY, RBACTIVATEDDATE, RBACTIVATEDBY, RBACCOUNTSTATUS, RBSVCCODE2, RBSVCCODE, CUSTOMERTYPE, RBSERVICENUMBER, RBCHANGESTATUSFROM, ".
			"RBSECONDARYACCOUNT, RBUNLIMITEDACCESS, RBTIMESLOT, RBORDERNUMBER, RBREMARKS, RBREALM, RBNUMBEROFSESSION, RBMULTISTATIC, RBIPADDRESS, RBENABLED) values ".
			"('".$s['USER_IDENTITY']."', '".$s['USER_IDENTITY']."', '".$s['USERNAME']."', null, '".$s['CUSTOMERSTATUS']."', '".$s['PASSWORD']."', '".($s['CUSTOMERREPLYITEM'] == '' ? null : $s['CUSTOMERREPLYITEM'])."', ".
			"TO_TIMESTAMP('".substr($now, 2, strlen($now))."', 'RR-MM-DD HH24:MI:SS'), null, ".
			"'".$s['RADIUSPOLICY']."', '".str_replace("'", "''", $s['RBCUSTOMERNAME'])."', '".$s['RBCREATEDBY']."', null, null, null, ".
			(is_null($s['RBADDITIONALSERVICE2']) ? "null, " : "'".$s['RBADDITIONALSERVICE2']."', ").
			(is_null($s['RBADDITIONALSERVICE1']) ? "null, " : "'".$s['RBADDITIONALSERVICE1']."', ").
			"null, null, ".
			($s['CUSTOMERSTATUS'] == 'Active' ? "TO_TIMESTAMP('".substr($now, 2, strlen($now))."', 'RR-MM-DD HH24:MI:SS'), " : "null, ").
			($s['CUSTOMERSTATUS'] == 'Active' ? "'".$s['RBACTIVATEDBY']."', " : "null, ")."'".$s['RBACCOUNTSTATUS']."', null, '".$s['RBSVCCODE']."', ".
			"'".$s['CUSTOMERTYPE']."', '".$s['RBSERVICENUMBER']."', null, null, 1, 'Al0000-2400', ".
			(is_null($s['RBORDERNUMBER']) ? "null, " : "'".$s['RBORDERNUMBER']."', ").(is_null($s['RBREMARKS']) ? "null, " : "'".str_replace("'", "''", $s['RBREMARKS'])."', ").
			"'".$s['RBREALM']."', 1, ".(is_null($s['RBMULTISTATIC']) ? "null, " : "'".$s['RBMULTISTATIC']."', ").
			(is_null($s['RBIPADDRESS']) ? "null, " : "'".$s['RBIPADDRESS']."', ").$s['RBENABLED'].")";
		$this->utility->query($query);
		return $this->utility->affected_rows() == 0 ? false : true;
	}
	public function update($cn, $s) {
		$this->utility->db_select();
		$now = date('Y-m-d H:i:s', mktime());
		if ($s[$this->COLUMN_PASSWORD] == '' || $s[$this->COLUMN_PASSWORD] == null) {
			$this->load->model('util');
			$s[$this->COLUMN_PASSWORD] = $this->util->generateRandomString($this->PASSWORD_LENGTH);
		}
		$query = "update TBLCUSTOMER set BANDWIDTH = '".$s['BANDWIDTH']."', CUSTOMERSTATUS = '".$s['CUSTOMERSTATUS']."', PASSWORD = '".$s['PASSWORD']."', ".
			"CUSTOMERREPLYITEM = ".(is_null($s['CUSTOMERREPLYITEM']) ? "null, " : "'".$s['CUSTOMERREPLYITEM']."', ").
			"LASTMODIFIEDDATE = TO_TIMESTAMP('".substr($now, 2, strlen($now))."', 'RR-MM-DD HH24:MI:SS'), ".
			"RBCUSTOMERNAME = '".str_replace("'", "''", $s['RBCUSTOMERNAME'])."', ".
			"RBADDITIONALSERVICE2 = ".(is_null($s['RBADDITIONALSERVICE2']) ? "null, " : "'".$s['RBADDITIONALSERVICE2']."', ").
			"RBADDITIONALSERVICE1 = ".(is_null($s['RBADDITIONALSERVICE1']) ? "null, " : "'".$s['RBADDITIONALSERVICE1']."', ").
			"RBCHANGESTATUSDATE = ".(is_null($s['RBCHANGESTATUSDATE']) ? 
				"null, " : 
				(strpos($s['RBCHANGESTATUSDATE'], 'AM') === false && strpos($s['RBCHANGESTATUSDATE'], 'PM') === false ? 
					"TO_TIMESTAMP('".substr($s['RBCHANGESTATUSDATE'], 2, strlen($s['RBCHANGESTATUSDATE']))."', 'RR-MM-DD HH24.MI.SS'), " :
					"TO_TIMESTAMP('".$s['RBCHANGESTATUSDATE']."', 'DD-MON-RR HH.MI.SS.FF ".substr($s['RBCHANGESTATUSDATE'], -2)."'), ")).
			"RBCHANGESTATUSBY = ".(is_null($s['RBCHANGESTATUSBY']) ? "null, " : "'".$s['RBCHANGESTATUSBY']."', ").
			"RBACTIVATEDDATE = ".(is_null($s['RBACTIVATEDDATE']) ? 
				"null, " : 
				(strpos($s['RBACTIVATEDDATE'], 'AM') === false && strpos($s['RBACTIVATEDDATE'], 'PM') === false ?
					"TO_TIMESTAMP('".substr($s['RBACTIVATEDDATE'], 2, strlen($s['RBACTIVATEDDATE']))."', 'RR-MM-DD HH24.MI.SS'), " : 
					"TO_TIMESTAMP('".$s['RBACTIVATEDDATE']."', 'DD-MON-RR HH.MI.SS.FF ".substr($s['RBACTIVATEDDATE'], -2)."'), ")).
			"RBACTIVATEDBY = ".(is_null($s['RBACTIVATEDBY']) ? "null, " : "'".$s['RBACTIVATEDBY']."', ")."RBACCOUNTSTATUS = '".$s['RBACCOUNTSTATUS']."', ".
			"RBSVCCODE2 = '".$s['RBSVCCODE2']."', RADIUSPOLICY = '".$s['RADIUSPOLICY']."', CUSTOMERTYPE = '".$s['CUSTOMERTYPE']."', RBSERVICENUMBER = '".$s['RBSERVICENUMBER']."', ".
			"RBCHANGESTATUSFROM = '".$s['RBCHANGESTATUSFROM']."', RBSECONDARYACCOUNT = '".$s['RBSECONDARYACCOUNT']."', ".
			"RBUNLIMITEDACCESS = ".(is_null($s['RBUNLIMITEDACCESS']) ? "1" : $s['RBUNLIMITEDACCESS']).", ".
			"RBTIMESLOT = '".$s['RBTIMESLOT']."', RBORDERNUMBER = ".(is_null($s['RBORDERNUMBER']) ? "null, " : "'".$s['RBORDERNUMBER']."', ").
			"RBREMARKS = '".str_replace("'", "''", $s['RBREMARKS'])."', RBREALM = '".$s['RBREALM']."', RBNUMBEROFSESSION = ".(is_null($s['RBNUMBEROFSESSION']) ? "1" : $s['RBNUMBEROFSESSION']).", ".
			"RBMULTISTATIC = ".(is_null($s['RBMULTISTATIC']) ? "null, " : "'".$s['RBMULTISTATIC']."', ").
			"RBIPADDRESS = ".(is_null($s['RBIPADDRESS']) ? "null, " : "'".$s['RBIPADDRESS']."', ")."RBENABLED = ".$s['RBENABLED']." ".
			"where USER_IDENTITY = '".$cn."'";
		log_message('info', 'update sql:'.$query);
		$this->utility->query($query);
		return $this->utility->affected_rows() == 0 ? false : true;
	}
	public function changeSubscriberPassword($username, $realm, $password) {
		$this->utility->db_select();
		$now = date('Y-m-d H:i:s', time());
		$query = "update TBLCUSTOMER set PASSWORD = '".$password."', RBREALM = '".$realm."', LASTMODIFIEDDATE = TO_TIMESTAMP('".substr($now, 2, strlen($now))."', 'RR-MM-DD HH24:MI:SS') where USERNAME = '".$username.'@'.$realm."'";
		$this->utility->query($query);
		return $this->utility->affected_rows() == 0 ? false : true;
	}
	public function delete($cn) {
		$this->utility->db_select();
		$this->utility->where($this->COLUMN_USERIDENTITY, $cn)
			->delete($this->TABLENAME);
		return $this->utility->affected_rows() == 0 ? false : true;
	}
	public function subscriberExists($cn) {
		$this->utility->db_select();
		$count = $this->utility->from($this->TABLENAME)
			->where($this->COLUMN_USERIDENTITY, $cn)
			->count_all_results();
		return $count == 0 ? false : true;
	}
	public function serviceNumberExists($serviceNumber) {
		$this->utility->db_select();
		$count = $this->utility->from($this->TABLENAME)
			->where($this->COLUMN_RBSERVICENUMBER, $serviceNumber)
			->count_all_results();
		return $count == 0 ? false : true;
	}
	public function findByUserIdentity($cn) {
		$this->utility->db_select();
		$query = $this->utility->select('*')
			->from($this->TABLENAME)
			->where($this->COLUMN_USERIDENTITY, $cn)
			->get();
		return $query->num_rows() == 0 ? false : $query->row_array();
	}
	public function findAll($order) {
		$this->utility->db_select();
		$query = $this->utility->select($this->COLUMN_USERIDENTITY.', '.$this->COLUMN_USERNAME.', '.$this->COLUMN_BANDWIDTH.', '.
			$this->COLUMN_CUSTOMERSTATUS.', '.$this->COLUMN_PASSWORD.', '.$this->COLUMN_CUSTOMERREPLYITEM.', '.$this->COLUMN_CREATEDATE.', '.$this->COLUMN_LASTMODIFIEDDATE.', '.
			$this->COLUMN_RBCUSTOMERNAME.', '.$this->COLUMN_RBCREATEDBY.', '.$this->COLUMN_RBADDITIONALSERVICE5.', '.$this->COLUMN_RBADDITIONALSERVICE4.', '.
			$this->COLUMN_RBADDITIONALSERVICE3.', '.$this->COLUMN_RBADDITIONALSERVICE2.', '.$this->COLUMN_RBADDITIONALSERVICE1.', '.$this->COLUMN_RBCHANGESTATUSDATE.', '.
			$this->COLUMN_RBCHANGESTATUSBY.', '.$this->COLUMN_RBACTIVATEDDATE.', '.$this->COLUMN_RBACTIVATEDBY.', '.$this->COLUMN_RBACCOUNTSTATUS.', '.$this->COLUMN_RBSVCCODE2.', '.
			$this->COLUMN_RADIUSPOLICY.', '.$this->COLUMN_CUSTOMERTYPE.', '.$this->COLUMN_RBSERVICENUMBER.', '.$this->COLUMN_RBCHANGESTATUSFROM.', '.
			$this->COLUMN_RBSECONDARYACCOUNT.', '.$this->COLUMN_RBUNLIMITEDACCESS.', '.$this->COLUMN_RBTIMESLOT.', '.$this->COLUMN_RBORDERNUMBER.', '.$this->COLUMN_RBREMARKS.', '.
			$this->COLUMN_RBREALM.', '.$this->COLUMN_RBNUMBEROFSESSION.', '.$this->COLUMN_RBMULTISTATIC.', '.$this->COLUMN_RBIPADDRESS.', '.$this->COLUMN_RBENABLED)
			->from($this->TABLENAME)
			->order_by($order['column'], $order['dir'])
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function findAllUsingColumn($column, $value, $start, $max, $order) {
		$this->utility->db_select();
		$query = $this->utility->select($this->COLUMN_USERIDENTITY.', '.$this->COLUMN_USERNAME.', '.$this->COLUMN_BANDWIDTH.', '.
			$this->COLUMN_CUSTOMERSTATUS.', '.$this->COLUMN_PASSWORD.', '.$this->COLUMN_CUSTOMERREPLYITEM.', '.$this->COLUMN_CREATEDATE.', '.$this->COLUMN_LASTMODIFIEDDATE.', '.
			$this->COLUMN_RBCUSTOMERNAME.', '.$this->COLUMN_RBCREATEDBY.', '.$this->COLUMN_RBADDITIONALSERVICE5.', '.$this->COLUMN_RBADDITIONALSERVICE4.', '.
			$this->COLUMN_RBADDITIONALSERVICE3.', '.$this->COLUMN_RBADDITIONALSERVICE2.', '.$this->COLUMN_RBADDITIONALSERVICE1.', '.$this->COLUMN_RBCHANGESTATUSDATE.', '.
			$this->COLUMN_RBCHANGESTATUSBY.', '.$this->COLUMN_RBACTIVATEDDATE.', '.$this->COLUMN_RBACTIVATEDBY.', '.$this->COLUMN_RBACCOUNTSTATUS.', '.$this->COLUMN_RBSVCCODE2.', '.
			$this->COLUMN_RADIUSPOLICY.', '.$this->COLUMN_CUSTOMERTYPE.', '.$this->COLUMN_RBSERVICENUMBER.', '.$this->COLUMN_RBCHANGESTATUSFROM.', '.
			$this->COLUMN_RBSECONDARYACCOUNT.', '.$this->COLUMN_RBUNLIMITEDACCESS.', '.$this->COLUMN_RBTIMESLOT.', '.$this->COLUMN_RBORDERNUMBER.', '.$this->COLUMN_RBREMARKS.', '.
			$this->COLUMN_RBREALM.', '.$this->COLUMN_RBNUMBEROFSESSION.', '.$this->COLUMN_RBMULTISTATIC.', '.$this->COLUMN_RBIPADDRESS.', '.$this->COLUMN_RBENABLED)
			->from($this->TABLENAME)
			->where($column, $value)
			->limit($start == 0 ? $max + 1 : $max, $start == 0 ? $start : $start + 1)
			->order_by($order['column'], $order['dir'])
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function searchSubscriber($column, $value, $exact, $wildcardLocation, $portal, $realm, $allowedRealms) { //wildcardLocation = 'before'/'after'/'both'
		log_message('info', 'column:'.$column);
		log_message('info', 'value:'.$value);
		log_message('info', 'exact:'.json_encode($exact));
		log_message('info', 'wildcardLocation:'.$wildcardLocation);
		log_message('info', 'realm:'.json_encode($realm));
		log_message('info', 'allowedRealms: '.json_encode($allowedRealms));
		$this->utility->db_select();
		$this->utility->select($this->COLUMN_USERIDENTITY.', '.$this->COLUMN_USERNAME.', '.$this->COLUMN_BANDWIDTH.', '.
			$this->COLUMN_CUSTOMERSTATUS.', '.$this->COLUMN_PASSWORD.', '.$this->COLUMN_CUSTOMERREPLYITEM.', '.$this->COLUMN_CREATEDATE.', '.$this->COLUMN_LASTMODIFIEDDATE.', '.
			$this->COLUMN_RBCUSTOMERNAME.', '.$this->COLUMN_RBCREATEDBY.', '.$this->COLUMN_RBADDITIONALSERVICE5.', '.$this->COLUMN_RBADDITIONALSERVICE4.', '.
			$this->COLUMN_RBADDITIONALSERVICE3.', '.$this->COLUMN_RBADDITIONALSERVICE2.', '.$this->COLUMN_RBADDITIONALSERVICE1.', '.$this->COLUMN_RBCHANGESTATUSDATE.', '.
			$this->COLUMN_RBCHANGESTATUSBY.', '.$this->COLUMN_RBACTIVATEDDATE.', '.$this->COLUMN_RBACTIVATEDBY.', '.$this->COLUMN_RBACCOUNTSTATUS.', '.$this->COLUMN_RBSVCCODE2.', '.
			$this->COLUMN_RADIUSPOLICY.', '.$this->COLUMN_CUSTOMERTYPE.', '.$this->COLUMN_RBSERVICENUMBER.', '.$this->COLUMN_RBCHANGESTATUSFROM.', '.
			$this->COLUMN_RBSECONDARYACCOUNT.', '.$this->COLUMN_RBUNLIMITEDACCESS.', '.$this->COLUMN_RBTIMESLOT.', '.$this->COLUMN_RBORDERNUMBER.', '.$this->COLUMN_RBREMARKS.', '.
			$this->COLUMN_RBREALM.', '.$this->COLUMN_RBNUMBEROFSESSION.', '.$this->COLUMN_RBMULTISTATIC.', '.$this->COLUMN_RBIPADDRESS.', '.$this->COLUMN_RBENABLED)
			->from($this->TABLENAME);
		if ($portal == 'admin') {
			if ($exact) {
				if ($column == 'RBIPADDRESS') {
					$this->utility->where($column, $value);
				} else if ($column == 'USERNAME') {
					$whereStr = '';
					for ($i = 0; $i < count($allowedRealms); $i++) {
						log_message('info', $i.'|'.json_encode($allowedRealms[$i]).'|'.gettype($allowedRealms[$i]));
						$whereStr = $whereStr."USERNAME = '".$value.'@'.$allowedRealms[$i]['NM']."' ";
						if ($i != count($allowedRealms) - 1) {
							$whereStr = $whereStr.' or ';
						}
					}
					log_message('info', $whereStr);
					$this->utility->where($whereStr);
				} else {
					$this->utility->where("regexp_like(".$column.", '^".$value."$', 'c')");
				}
			} else {
				if ($column != 'RBIPADDRESS') {
					if ($wildcardLocation == 'after') {
						$this->utility->where("regexp_like(".$column.", '^".$value."', 'c')");
					} else if ($wildcardLocation == 'before') {
						$this->utility->where("regexp_like(".$column.", '".$value."$', 'c')");
					} else if ($wildcardLocation == 'both') {
						$this->utility->where("regexp_like(".$column.", '".$value."', 'c')");
					}
					$whereStr = '';
					$whereStr = $whereStr."(";
					for ($i = 0; $i < count($allowedRealms); $i++) {
						log_message('info', $i.'|'.json_encode($allowedRealms[$i]).'|'.gettype($allowedRealms[$i]));
						$whereStr = $whereStr."RBREALM = '".$allowedRealms[$i]['NM']."' ";
						if ($i != count($allowedRealms) - 1) {
							$whereStr = $whereStr.' or ';
						}
					}
					$whereStr = $whereStr.")";
					$this->utility->where($whereStr);
				} else {
					$this->utility->like($column, $value, $wildcardLocation);
				}
			}
		} else if ($portal == 'service') {
			if ($exact) {
				if ($column == 'USERNAME') {
					//$this->utility->where("regexp_like(".$column.", '".$value.'@'.$realm."', 'c')");
					$this->utility->where($column, $value.'@'.$realm);
				}  else if ($column == 'RBCUSTOMERNAME' || $column == 'RBORDERNUMBER' || $column == 'RBSERVICENUMBER') {
					$this->utility->where("regexp_like(".$column.", '^".$value."$', 'c')");
				} else if ($column == 'RBIPADDRESS') {
					$this->utility->where($column, $value);
				} else {
					$this->utility->where("regexp_like(".$column.", '^".$value."$', 'c')");
				}
			} else {
				if ($column != 'RBIPADDRESS') {
					if ($wildcardLocation == 'after') {
						$this->utility->where("regexp_like(".$column.", '^".$value."', 'c')");
					} else if ($wildcardLocation == 'before') {
						$this->utility->where("regexp_like(".$column.", '".$value."$', 'c')");
					} else if ($wildcardLocation == 'both') {
						$this->utility->where("regexp_like(".$column.", '".$value."', 'c')");
					}
				} else {
					$this->utility->like($column, $value, $wildcardLocation);
				}
			}
			if (!is_null($realm)) {
				$this->utility->where($this->COLUMN_RBREALM, $realm);
			}
		}
		$query = $this->utility->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function countAllUsingColumn($column, $value) {
		$this->utility->db_select();
		$count = $this->utility->from($this->TABLENAME)
			->where($column, $value)
			->count_all_results();
		return $count;
	}
	public function isValid($subscriber) {
		$errors = array();
		if ($subscriber[$this->COLUMN_USERIDENTITY] == null || trim($subscriber[$this->COLUMN_USERIDENTITY]) == '' || $subscriber[$this->COLUMN_USERNAME] == null || 
			$subscriber[$this->COLUMN_USERNAME] == '') {
			$errors['USERNAME'] = 'The username is missing/invalid.';
			return array('status' => false, 'errors' => $errors);
		}
		// $index = strrpos($subscriber[$this->COLUMN_USERIDENTITY], '@');
		// $username = $index === false ? $subscriber[$this->COLUMN_USERIDENTITY] : substr($subscriber[$this->COLUMN_USERIDENTITY], 0, $index);
		// if ($subscriber[$this->COLUMN_PASSWORD] == null || trim($subscriber[$this->COLUMN_PASSWORD]) == '') {
		// 	$errors['PASSWORD'] = 'The password is missing/invalid.';
		// 	return array('status' => false, 'errors' => $errors);
		// }
		if ($subscriber[$this->COLUMN_CUSTOMERTYPE] == null || trim($subscriber[$this->COLUMN_CUSTOMERTYPE]) == '') {
			$errors['CUSTOMERTYPE'] = 'The customer type is missing/invalid.';
			return array('status' => false, 'errors' => $errors);
		}
		if ($subscriber[$this->COLUMN_CUSTOMERSTATUS] == null || trim($subscriber[$this->COLUMN_CUSTOMERSTATUS]) == '') {
			$errors['CUSTOMERSTATUS'] = 'The customer status is missing/invalid.';
			return array('status' => false, 'errors' => $errors);
		} else {
			$found = false;
			for ($i = 0; $i < count($this->STATUSES); $i++) {
				if ($subscriber[$this->COLUMN_CUSTOMERSTATUS] == $this->STATUSES[$i]) {
					$found = true;
				}
			}
			if (!$found) {
				$errors['CUSTOMERSTATUS'] = 'The customer status is missing/invalid.';
				return array('status' => false, 'errors' => $errors);
			}
		}
		if ($subscriber[$this->COLUMN_RBCUSTOMERNAME] == null || trim($subscriber[$this->COLUMN_RBCUSTOMERNAME]) == '') {
			$errors['RBCUSTOMERNAME'] = 'The customer name is missing/invalid.';
			return array('status' => false, 'errors' => $errors);
		}        
		if ($subscriber[$this->COLUMN_RBSERVICENUMBER] == null || trim($subscriber[$this->COLUMN_RBSERVICENUMBER]) == '') {
			$errors['RBSERVICENUMBER'] = 'The service number is missing/invalid.';
			return array('status' => false, 'errors' => $errors);
		}
		if ($subscriber[$this->COLUMN_RBENABLED] == 1 && ($subscriber[$this->COLUMN_RADIUSPOLICY] == null || trim($subscriber[$this->COLUMN_RADIUSPOLICY]) == '')) {
			$errors['RBENABLED'] = 'Account enabling invalid.';
			return array('status' => false, 'errors' => $errors);
		}
		$this->load->model('services');
		$services = $this->services->fetchAllNamesOnly2();
		$additionalServices = $this->services->fetchAllNamesOnly();
		if ($subscriber[$this->COLUMN_RADIUSPOLICY] != null && trim($subscriber[$this->COLUMN_RADIUSPOLICY]) != '') {
			$found = false;
			for ($i = 0; $i < count($services); $i++) {
				if ($subscriber[$this->COLUMN_RADIUSPOLICY] == $services[$i]) {
					$found = true;
					break;
				}
			}
			if (!$found) {
				$errors['RADIUSPOLICY'] = 'The service is missing/invalid.';
				return array('status' => false, 'errors' => $errors);
			}
		} else {
			$errors['RADIUSPOLICY'] = 'The service is missing/invalid.';
			return array('status' => false, 'errors' => $errors);
		}
		return array('status' => true);
	}
	public function rowDataToSubscriberArray($data, $realm, $sysuser, $action) {
		$now = date('Y-m-d H:i:s', mktime());
		$rbenabled = 0;
		if ($data[7] == 'Y') {
			if ($data[3] == 'D' || $data[3] == 'T') {
				$rbenabled = 0;
			} else {
				$rbenabled = 1;
			}
		}
		if ($data[3] == 'A') {
			$data[3] = 'Active';
		} else if ($data[3] == 'D') {
			$data[3] = 'InActive';
		}
		$subscriber = array(
			$this->COLUMN_USERIDENTITY => $data[0].'@'.$realm,
			$this->COLUMN_USERNAME => $data[0].'@'.$realm,
			$this->COLUMN_BANDWIDTH => null,
			$this->COLUMN_CUSTOMERSTATUS => $data[3],
			$this->COLUMN_PASSWORD => $data[1],
			$this->COLUMN_CUSTOMERREPLYITEM => null,
			$this->COLUMN_CREATEDATE => $action == 'create' ? $now : null,
			$this->COLUMN_LASTMODIFIEDDATE => $action == 'create' ? null : $now,
			$this->COLUMN_RBCUSTOMERNAME => $data[5],
			$this->COLUMN_RBCREATEDBY => $sysuser,
			$this->COLUMN_RBADDITIONALSERVICE5 => null,
			$this->COLUMN_RBADDITIONALSERVICE4 => null,
			$this->COLUMN_RBADDITIONALSERVICE3 => null,
			$this->COLUMN_RBADDITIONALSERVICE2 => $data[12] == '' ? null : $data[12],
			$this->COLUMN_RBADDITIONALSERVICE1 => $data[11] == '' ? null : $data[11],
			$this->COLUMN_RBCHANGESTATUSDATE => null,
			$this->COLUMN_RBCHANGESTATUSBY => $sysuser,
			$this->COLUMN_RBACTIVATEDDATE => $data[3] == 'Active' ? $now : null,
			$this->COLUMN_RBACTIVATEDBY => $data[3] == 'Active' ? $sysuser : null,
			$this->COLUMN_RBACCOUNTSTATUS => 'Primary',
			$this->COLUMN_RBSVCCODE2 => null,
			$this->COLUMN_RBSVCCODE => $data[8],
			$this->COLUMN_RADIUSPOLICY => $data[8],
			$this->COLUMN_CUSTOMERTYPE => $data[2],
			$this->COLUMN_RBSERVICENUMBER => $data[6],
			$this->COLUMN_RBCHANGESTATUSFROM => null,
			$this->COLUMN_RBSECONDARYACCOUNT => null,
			$this->COLUMN_RBUNLIMITEDACCESS => 1, //true
			$this->COLUMN_RBTIMESLOT => 'Al0000-2400',
			$this->COLUMN_RBORDERNUMBER => $data[4] == '' ? null : $data[4],
			$this->COLUMN_RBREMARKS => $data[13] == '' ? null : $data[13],
			$this->COLUMN_RBREALM => $realm,
			$this->COLUMN_RBNUMBEROFSESSION => 1,
			//$this->COLUMN_RBMULTISTATIC => ($data[3] == 'T' || $data[3] == 'K' || $data[3] == 'H') ? null : ($data[10] == '' ? null : $data[10]),
			//$this->COLUMN_RBIPADDRESS => ($data[3] == 'T' || $data[3] == 'K' || $data[3] == 'H') ? null : ($data[9] == '' ? null : $data[9]),
			$this->COLUMN_RBMULTISTATIC => $data[10] == '' ? null : $data[10],
			$this->COLUMN_RBIPADDRESS => $data[9] == '' ? null : $data[9],
			$this->COLUMN_RBENABLED => $rbenabled);
		if (!is_null($subscriber[$this->COLUMN_RBIPADDRESS]) && is_null($subscriber[$this->COLUMN_RBMULTISTATIC])) {
			$subscriber[$this->COLUMN_CUSTOMERREPLYITEM] = '0:8='.$subscriber[$this->COLUMN_RBIPADDRESS];
		} else if (!is_null($subscriber[$this->COLUMN_RBIPADDRESS]) && !is_null($subscriber[$this->COLUMN_RBMULTISTATIC])) {
			$subscriber[$this->COLUMN_CUSTOMERREPLYITEM] = '0:8='.$subscriber[$this->COLUMN_RBIPADDRESS].',0:22='.$subscriber[$this->COLUMN_RBMULTISTATIC];
		}
		return $subscriber;
	}
	public function rowDataToSubscriberUpdateArray($data, $realm, $sysuser) {
		$now = date('Y-m-d H:i:s', mktime());
		$rbenabled = null;
		if ($data[7] == 'Y') {
			if ($data[3] == 'D' || $data[3] == 'T') {
				$rbenabled = 0;
			} else {
				$rbenabled = 1;
			}
		}
		if ($data[3] == 'A') {
			$data[3] = 'Active';
		} else if ($data[3] == 'D') {
			$data[3] = 'InActive';
		}
		$subscriber = array(
			$this->COLUMN_USERIDENTITY => $data[0].'@'.$realm,
			$this->COLUMN_USERNAME => $data[0].'@'.$realm,
			$this->COLUMN_BANDWIDTH => null,
			$this->COLUMN_CUSTOMERSTATUS => $data[3] == '' ? null : $data[3],
			$this->COLUMN_PASSWORD => $data[1] == '' ? null : $data[1],
			$this->COLUMN_CUSTOMERREPLYITEM => null,
			$this->COLUMN_CREATEDATE => null,
			$this->COLUMN_LASTMODIFIEDDATE => $now,
			$this->COLUMN_RBCUSTOMERNAME => $data[5] == '' ? null : $data[5],
			$this->COLUMN_RBCREATEDBY => null,
			$this->COLUMN_RBADDITIONALSERVICE5 => null,
			$this->COLUMN_RBADDITIONALSERVICE4 => null,
			$this->COLUMN_RBADDITIONALSERVICE3 => null,
			$this->COLUMN_RBADDITIONALSERVICE2 => $data[12] == '' ? null : $data[12],
			$this->COLUMN_RBADDITIONALSERVICE1 => $data[11] == '' ? null : $data[11],
			$this->COLUMN_RBCHANGESTATUSDATE => null,
			$this->COLUMN_RBCHANGESTATUSBY => $sysuser,
			$this->COLUMN_RBACTIVATEDDATE => $data[3] == '' ? null : ($data[3] == 'Active' ? $now : null),
			$this->COLUMN_RBACTIVATEDBY => $data[3] == '' ? null : ($data[3] == 'Active' ? $sysuser : null),
			$this->COLUMN_RBACCOUNTSTATUS => null,
			$this->COLUMN_RBSVCCODE2 => null,
			$this->COLUMN_RBSVCCODE => $data[8] == '' ? null : $data[8],
			$this->COLUMN_RADIUSPOLICY => $data[8] == '' ? null : $data[8],
			$this->COLUMN_CUSTOMERTYPE => $data[2] == '' ? null : $data[2],
			$this->COLUMN_RBSERVICENUMBER => $data[6] == '' ? null : $data[6],
			$this->COLUMN_RBCHANGESTATUSFROM => null,
			$this->COLUMN_RBSECONDARYACCOUNT => null,
			$this->COLUMN_RBUNLIMITEDACCESS => null, //true
			$this->COLUMN_RBTIMESLOT => null, //'Al0000-2400',
			$this->COLUMN_RBORDERNUMBER => $data[4] == '' ? null : $data[4],
			$this->COLUMN_RBREMARKS => $data[13] == '' ? null : $data[13],
			$this->COLUMN_RBREALM => null, //$realm,
			$this->COLUMN_RBNUMBEROFSESSION => null, //1,
			$this->COLUMN_RBMULTISTATIC => $data[10] == '' ? null : $data[10],
			$this->COLUMN_RBIPADDRESS => $data[9] == '' ? null : $data[9],
			$this->COLUMN_RBENABLED => $rbenabled);
		return $subscriber;
	}
	public function fetchPlanBoosts() {
		$this->utility->db_select();
		$query = $this->utility->select('boost')
			->from('TBLSPEEDBOOST')
			->order_by('boost', 'desc')
			->get();
		//return array('_DAY', '_NGT', '_INS', '_2Mb', '_3Mb', '_4Mb', '_7Mb', '_9Mb', '_10Mb', '_12Mb', '_13Mb', '_14Mb', '_50Mb');
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	/*****************************************************************************
	 * $activated = 'Y' / 'N'
	 * $creationdate = Y-m-d H:i:s format
	 * $services = array('service1', 'service2', ...)
	 * $preauth = 'N'
	 *****************************************************************************/
	public function npmCreateXML($cn, $password, $activated, $creationdate, $service, $ipaddress, $netaddress, $preauth,
		$npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout) {

		// $serviceHasDAY = strpos($service, '_DAY') !== false ? true : false;
		// $serviceHasNGT = strpos($service, '_NGT') !== false ? true : false;
		// $serviceHasINS = strpos($service, '_INS') !== false ? true : false;
		// $serviceHas2Mb = strpos($service, '_2Mb') !== false ? true : false;
		// $serviceHas3Mb = strpos($service, '_3Mb') !== false ? true : false;
		// $serviceHas4Mb = strpos($service, '_4Mb') !== false ? true : false;
		$boosts = $this->fetchPlanBoosts();
		log_message('info', json_encode($boosts));
		$hasBoost = array();
		for ($j = 0; $j < count($boosts); $j++) {
			$hasBoost[] = strpos($service, $boosts[$j]['boost']) !== false ? true : false;
		}
		$noBoost = true;
		for ($j = 0; $j < count($hasBoost); $j++) {
			if ($hasBoost[$j]) {
				$noBoost = false;
			}
		}

		$planNodes = explode('_', $service);
		$planStr = '';
		// if (($serviceHasDAY == false && $serviceHasNGT == false && $serviceHasINS == false) && !($serviceHas2Mb || $serviceHas3Mb || $serviceHas4Mb)) {
		// 	$planStr = '<ServiceSubscription><ServiceId>'.$service.'</ServiceId></ServiceSubscription>';
		// } else {
		// 	for ($n = 0; $n < count($planNodes); $n++) {
		// 		$planStr = $planStr.'<ServiceSubscription><ServiceId>'.$planNodes[$n].'</ServiceId></ServiceSubscription>';
		// 	}
		// }
		if ($noBoost) {
			$planStr = '<ServiceSubscription><ServiceId>'.$service.'</ServiceId></ServiceSubscription>';
		} else {
			for ($n = 0; $n < count($planNodes); $n++) {
				$planStr = $planStr.'<ServiceSubscription><ServiceId>'.$planNodes[$n].'</ServiceId></ServiceSubscription>';
			}
		}

		$xmlStr = ''.
			'<?xml version="1.0" encoding="UTF-8"?>'.
			'<SubscriberAccount>'.
				'<Name>'.$cn.'</Name>'.
				'<Password>'.$password.'</Password>'.
				'<Activated>'.$activated.'</Activated>'.
				'<CreationDate>'.date('Y-m-d H:i:s', $creationdate).'</CreationDate>'.
				'<ServiceSubscriptions>'.
					'<ServiceSubscription>'.
						'<ServiceId>EVO_ACCESS_POST</ServiceId>'.
					'</ServiceSubscription>'.
					$planStr.
				'</ServiceSubscriptions>';
		if (!is_null($ipaddress)) {
			$xmlStr = $xmlStr.
				'<CircuitAttributes>'.
					'<CircuitAttribute>'.
						'<SessionFilter><Session-Name>'.$cn.'</Session-Name></SessionFilter>'.
						(is_null($ipaddress) ? '' : '<Static-IP-Address>'.$ipaddress.'</Static-IP-Address>').
						(is_null($netaddress) ? '' : '<Framed-Route>'.$netaddress.' '.$ipaddress.'</Framed-Route>').
					'</CircuitAttribute>'.
				'</CircuitAttributes>';
		}
		$xmlStr = $xmlStr.'</SubscriberAccount>';
		log_message('info', $xmlStr);

		log_message('info', $npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL');
		log_message('info', $npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/');
		log_message('info', 'http://'.urlencode($npmLogin).':'.urlencode($npmPassword).'@'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL');
		$options = array(
			'location' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL',
			'uri' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/',
			'login' => $npmLogin,
			'password' => $npmPassword,
			'trace' => 1,
			'connection_timeout' => $npmTimeout);
		$client = null;
		try {
			$client = new SoapClient('http://'.urlencode($npmLogin).':'.urlencode($npmPassword).'@'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL', $options);
			$result = $client->addSubscriberAccountXML($xmlStr);
			if (!is_null($result)) {
				return array('result' => false, 'error' => json_encode($result));
			} else {
				return array('result' => true);
			}
		} catch (Exception $e) {
			$err = $this->extractErrorMsg($e);
			return array('result' => false, 'error' => $err);
		}
	}
	public function npmFetchXML($cn, $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout) {
		$options = array(
			'location' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL',
			'uri' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/',
			'login' => $npmLogin,
			'password' => $npmPassword,
			'trace' => 1,
			'connection_timeout' => $npmTimeout);
		try {
			$client = new SoapClient('http://'.urlencode($npmLogin).':'.urlencode($npmPassword).'@'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL', $options);
			$result = $client->getSubscriberAccountXML($cn);
			$subscriber = $this->xmlStrToNPMSubsArray($result);
			return array('found' => true, 'data' => $subscriber);
		} catch (Exception $e) {
			$err = $this->extractErrorMsg($e);
			return array('found' => false, 'error' => $err);
		}
	}
	public function npmUpdateXML($cn, $password, $activated, $service, $ipaddress, $netaddress, $preauth,
		$npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout) {
		$data = $this->npmFetchXML($cn, $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout);
		if (!$data['found']) { //subscriber not in npm
			return $data['error'];
		}
		$subscriber = $data['data'];

		// $serviceHasDAY = strpos($service, '_DAY') !== false ? true : false;
		// $serviceHasNGT = strpos($service, '_NGT') !== false ? true : false;
		// $serviceHasINS = strpos($service, '_INS') !== false ? true : false;
		// $serviceHas2Mb = strpos($service, '_2Mb') !== false ? true : false;
		// $serviceHas3Mb = strpos($service, '_3Mb') !== false ? true : false;
		// $serviceHas4Mb = strpos($service, '_4Mb') !== false ? true : false;
		
		$boosts = $this->fetchPlanBoosts();
		$hasBoost = array();
		for ($j = 0; $j < count($boosts); $j++) {
			$hasBoost[] = strpos($service, $boosts[$j]['boost']) !== false ? true : false;
		}
		$noBoost = true;
		for ($j = 0; $j < count($hasBoost); $j++) {
			if ($hasBoost[$j]) {
				$noBoost = false;
			}
		}

		$planNodes = explode('_', $service);
		$planStr = '';
		// if (($serviceHasDAY == false && $serviceHasNGT == false && $serviceHasINS == false) && !($serviceHas2Mb || $serviceHas3Mb || $serviceHas4Mb)) {
		// 	$planStr = '<ServiceSubscription><ServiceId>'.$service.'</ServiceId></ServiceSubscription>';
		// } else {
		// 	for ($n = 0; $n < count($planNodes); $n++) {
		// 		$planStr = $planStr.'<ServiceSubscription><ServiceId>'.$planNodes[$n].'</ServiceId></ServiceSubscription>';
		// 	}
		// }

		if ($noBoost) {
			$planStr = '<ServiceSubscription><ServiceId>'.$service.'</ServiceId></ServiceSubscription>';
		} else {
			for ($n = 0; $n < count($planNodes); $n++) {
				$planStr = $planStr.'<ServiceSubscription><ServiceId>'.$planNodes[$n].'</ServiceId></ServiceSubscription>';
			}
		}

		$xmlStr = ''.
			'<?xml version="1.0" encoding="UTF-8"?>'.
				'<SubscriberAccount>'.
					'<Name>'.$cn.'</Name>'.
					'<Password>'.$password.'</Password>'.
					'<Activated>'.$activated.'</Activated>'.
					'<CreationDate>'.$subscriber['CREATED'].'</CreationDate>'.
					'<ServiceSubscriptions>'.
						'<ServiceSubscription>'.
							'<ServiceId>EVO_ACCESS_POST</ServiceId>'.
						'</ServiceSubscription>'.
						$planStr.
					'</ServiceSubscriptions>';
		$netAddrParts = explode(' ', trim($netaddress));
		if (!is_null($ipaddress)) {
			$xmlStr = $xmlStr.
					'<CircuitAttributes>'.
						'<CircuitAttribute>'.
							'<SessionFilter><Session-Name>'.$cn.'</Session-Name></SessionFilter>'.
							(is_null($ipaddress) ? '' : '<Static-IP-Address>'.$ipaddress.'</Static-IP-Address>').
							(is_null($netaddress) ? '' : '<Framed-Route>'.$netaddress.(count($netAddrParts) == 1 ? ' '.$ipaddress : '').'</Framed-Route>').
						'</CircuitAttribute>'.
					'</CircuitAttributes>';
		}
		$xmlStr = $xmlStr.
				'</SubscriberAccount>';
		log_message('info', $xmlStr);

		$options = array(
			'location' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL',
			'uri' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/',
			'login' => $npmLogin,
			'password' => $npmPassword,
			'trace' => 1,
			'connection_timeout' => $npmTimeout);
		$client = null;
		try {
			$client = new SoapClient('http://'.urlencode($npmLogin).':'.urlencode($npmPassword).'@'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL', $options);
			$result = $client->updateSubscriberAccountXML($xmlStr);
			if (!is_null($result)) {
				return array('result' => false, 'error' => json_encode($result));
			} else {
				if ($activated == 'N') {
					$this->load->model('onlinesession');
					$this->onlinesession->npmClearSession($cn, $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword);
					sleep(10);
				}
				return array('result' => true);
			}
		} catch (Exception $e) {
			$err = $this->extractErrorMsg($e);
			return array('result' => false, 'error' => $err);
		}
	}
	public function npmRemoveSubscriber($cn, $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout) {
		$options = array(
			'location' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL',
			'uri' => 'http://'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/',
			'login' => $npmLogin,
			'password' => $npmPassword,
			'trace' => 1,
			'connection_timeout' => $npmTimeout);
		$client = null;
		$result = null;
		try {
			$client = new SoapClient('http://'.urlencode($npmLogin).':'.urlencode($npmPassword).'@'.$npmHost.':'.$npmPort.'/NPM_API-'.$npmApi.'/user_mgmt?WSDL', $options);
			$subs = $this->npmFetchXML($cn, $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout);
			if ($subs['found']) {
				// $result = $client->removeSubscriberAccount($cn);
				// return array('deleted' => true);
			} else {
				return array('deleted' => true);
			}
		} catch (Exception $e) {
			$err = $this->extractErrorMsg($e);
			return array('deleted' => false, 'error' => $err);
		}
		$s = $subs['data'];
		try {
			$netParts = explode(' ', $s['RBMULTISTATIC']);
			$deactivated = $this->npmUpdateXML($s['USERNAME'], $s['PASSWORD'], 'N', $s['RADIUSPOLICY'], $s['RBIPADDRESS'], $netParts[0], 'N',
				$npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout);
			sleep(2);
			if ($deactivated['result']) {
				$this->load->model('onlinesession');
				$parts = explode('@', $s['USERNAME']);
				$sessions = $this->onlinesession->npmGetSessions($parts[0], isset($parts[1]) ? $parts[1] : "", $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword);
				if ($sessions['data'] !== false) {
					$this->onlinesession->npmClearSession($cn, $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword);
					sleep(10);
				}
			} else {
				return array('deleted' => false, 'error' => 'failed to deactivate account: '.$s['USERNAME']);
			}
		} catch (Exception $e) {
			$err = $this->extractErrorMsg($e);
			return array('deleted' => false, 'error' => $err);			
		}
		try {
			$client->removeSubscriberAccount($cn);
			$check = $this->npmFetchXML($s['USERNAME'], $npmHost, $npmPort, $npmApi, $npmLogin, $npmPassword, $npmTimeout);
			if ($check['found']) {
				return array('deleted' => false, 'error' => 'failed to delete account');
			} else {
				return array('deleted' => true);
			}
		} catch (Exception $e) {
			$err = $this->extractErrorMsg($e);
			log_message('info', $err);
			return array('deleted' => false, 'error' => $err);
		}
	}
	public function xmlStrToNPMSubsArray($xmlStr) {
		$namestart = strpos($xmlStr, '<Name>');
		$nameend = strpos($xmlStr, '</Name>');
		$name = substr($xmlStr, $namestart + strlen('<Name>'), $nameend - $namestart - strlen('</Name>') + 1);
		$passwordstart = strpos($xmlStr, '<Password>');
		$passwordend = strpos($xmlStr, '</Password>');
		$password = substr($xmlStr, $passwordstart + strlen('<Password>'), $passwordend - $passwordstart - strlen('</Password>') + 1);
		$activatedstart = strpos($xmlStr, '<Activated>');
		$activatedend = strpos($xmlStr, '</Activated>');
		$activated = substr($xmlStr, $activatedstart + strlen('<Activated>'), $activatedend - $activatedstart - strlen('</Activated>') + 1);
		$createdstart = strpos($xmlStr, '<CreationDate>');
		$createdend = strpos($xmlStr, '</CreationDate>');
		$created = substr($xmlStr, $createdstart + strlen('<CreationDate>'), $createdend - $createdstart - strlen('</CreationDate>') + 1);
		$planstart = strpos($xmlStr, '<ServiceId>');
		$planend = strpos($xmlStr, '</ServiceId>');
		$plan1 = substr($xmlStr, $planstart + strlen('<ServiceId>'), $planend - $planstart - strlen('</ServiceId>') + 1);
		$planstart = strpos($xmlStr, '<ServiceId>', $planstart + 2);
		$planend = strpos($xmlStr, '</ServiceId>', $planstart);
		$plan2 = substr($xmlStr, $planstart + strlen('<ServiceId>'), $planend - $planstart - strlen('</ServiceId>') + 1);
		$ipstart = strpos($xmlStr, '<Static-IP-Address>');
		if ($ipstart !== false) {
			$ipend = strpos($xmlStr, '</Static-IP-Address>');
			$ip = substr($xmlStr, $ipstart + strlen('<Static-IP-Address>'), $ipend - $ipstart - strlen('</Static-IP-Address>') + 1);
		}
		$netstart = strpos($xmlStr, '<Framed-Route>');
		if ($netstart !== false) {
			$netend = strpos($xmlStr, '</Framed-Route>');
			$net = substr($xmlStr, $netstart + strlen('<Framed-Route>'), $netend - $netstart - strlen('</Framed-Route>') + 1);
		}
		$subscriber = array(
			'USERNAME' => $name,
			'PASSWORD' => $password,
			'ACTIVATED' => $activated,
			'CREATED' => $created,
			'RADIUSPOLICY' => $plan1 == 'EVO_ACCESS_POST' ? $plan2 : $plan1,
			'RBIPADDRESS' => $ipstart !== false ? $ip : null,
			'RBMULTISTATIC' => $netstart !== false ? $net : null);
		return $subscriber;
	}
	public function extractErrorMsg($errorObj) {
		$error = json_encode($errorObj);
		$start = '"detail":{"';
		$end = '":{"enc_type"';
		$errorP1 = substr($error, strpos($error, $start) + strlen($start), strpos($error, $end) - strpos($error, $start) - strlen($end) + 2);
		$start = '{"message":"';
		$end = '},"enc_stype';
		$errorP2 = substr($error, strpos($error, $start) + strlen($start), strpos($error, $end) - strpos($error, $start) - strlen($end) - 1);
		return $errorP1.': '.$errorP2;
	}

	/*****************************************************************************
	 * report generation
	 *****************************************************************************/
	public function reportSubscribersWithStatus($realm, $status, $start, $max) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where($this->COLUMN_CUSTOMERSTATUS, $status);
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->limit($start == 0 ? $max + 1 : $max, $start == 0 ? $start : $start + 1)
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function reportSubscribersWithStatusAll($realm, $status) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where($this->COLUMN_CUSTOMERSTATUS, $status);
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function countSubscribersWithStatus($realm, $status) {
		$this->utility->db_select();
		$this->utility->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$count = $this->utility->where($this->COLUMN_CUSTOMERSTATUS, $status)
			->count_all_results();
		return $count;
	}
	public function reportSubscribersWithService($realm, $service, $start, $max) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where($this->COLUMN_RADIUSPOLICY, str_replace('-', '~', $service));
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->limit($start == 0 ? $max + 1 : $max, $start == 0 ? $start : $start + 1)
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function reportSubscribersWithServiceAll($realm, $service) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where($this->COLUMN_RADIUSPOLICY, str_replace('-', '~', $service));
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function countSubscribersWithService($realm, $service) {
		$this->utility->db_select();
		$this->utility->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$count = $this->utility->where($this->COLUMN_RADIUSPOLICY, str_replace('-', '~', $service))
			->count_all_results();
		return $count;
	}
	public function reportSubscribersCreatedWithinDates($realm, $datestart, $dateend, $start, $max) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$startStr = date('Y-m-d', $datestart);
		$endStr = date('Y-m-d', $dateend);
		if ($startStr == $endStr) {
			$dateend = $dateend + (60 * 60 * 24);
			$endStr = date('Y-m-d', $dateend);
			$this->utility->where($this->COLUMN_CREATEDATE." >= TO_TIMESTAMP('".substr($startStr, 2, strlen($startStr))."', 'RR-MM-DD')")
				->where($this->COLUMN_CREATEDATE." < TO_TIMESTAMP('".substr($endStr, 2, strlen($endStr))."', 'RR-MM-DD')");
		} else {
			$this->utility->where($this->COLUMN_CREATEDATE." >= TO_TIMESTAMP('".substr($startStr, 2, strlen($startStr))."', 'RR-MM-DD')")
				->where($this->COLUMN_CREATEDATE." <= TO_TIMESTAMP('".substr($endStr, 2, strlen($endStr))."', 'RR-MM-DD')");
		}
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->limit($start == 0 ? $max + 1 : $max, $start == 0 ? $start : $start + 1)
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function reportSubscribersCreatedWithinDatesAll($realm, $datestart, $dateend) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$startStr = date('Y-m-d', $datestart);
		$endStr = date('Y-m-d', $dateend);
		if ($startStr == $endStr) {
			$dateend = $dateend + (60 * 60 * 24);
			$endStr = date('Y-m-d', $dateend);
			$this->utility->where($this->COLUMN_CREATEDATE." >= TO_TIMESTAMP('".substr($startStr, 2, strlen($startStr))."', 'RR-MM-DD')")
				->where($this->COLUMN_CREATEDATE." < TO_TIMESTAMP('".substr($endStr, 2, strlen($endStr))."', 'RR-MM-DD')");
		} else {
			$this->utility->where($this->COLUMN_CREATEDATE." >= TO_TIMESTAMP('".substr($startStr, 2, strlen($startStr))."', 'RR-MM-DD')")
				->where($this->COLUMN_CREATEDATE." <= TO_TIMESTAMP('".substr($endStr, 2, strlen($endStr))."', 'RR-MM-DD')");
		}
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function countSubscribersCreatedWithinDates($realm, $datestart, $dateend) {
		$this->utility->db_select();
		$this->utility->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$startStr = date('Y-m-d', $datestart);
		$endStr = date('Y-m-d', $dateend);
		$count = 0;
		if ($startStr == $endStr) {
			$dateend = $dateend + (60 * 60 * 24);
			$endStr = date('Y-m-d', $dateend);
			$count = $this->utility->where($this->COLUMN_CREATEDATE." >= TO_TIMESTAMP('".substr($startStr, 2, strlen($startStr))."', 'RR-MM-DD')")
				->where($this->COLUMN_CREATEDATE." < TO_TIMESTAMP('".substr($endStr, 2, strlen($endStr))."', 'RR-MM-DD')")
				->count_all_results();
		} else {
			$count = $this->utility->where($this->COLUMN_CREATEDATE." >= TO_TIMESTAMP('".substr($startStr, 2, strlen($startStr))."', 'RR-MM-DD')")
				->where($this->COLUMN_CREATEDATE." <= TO_TIMESTAMP('".substr($endStr, 2, strlen($endStr))."', 'RR-MM-DD')")
				->count_all_results();
		}
		return $count;
	}
	public function reportSubscribersWithStaticIp($realm, $start, $max) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where("RBIPADDRESS IS NOT NULL");
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->limit($start == 0 ? $max + 1 : $max, $start == 0 ? $start : $start + 1)
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function reportSubscribersWithStaticIpAll($realm) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where("RBIPADDRESS IS NOT NULL");
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function countSubscribersWithStaticIp($realm) {
		$this->utility->db_select();
		$this->utility->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$count = $this->utility->where("RBIPADDRESS IS NOT NULL")
			->count_all_results();
		return $count;
	}
	public function reportSubscribersWithStaticIpAndMultistaticIp($realm, $start, $max) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where("RBIPADDRESS IS NOT NULL")
			->where("RBMULTISTATIC IS NOT NULL");
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->limit($start == 0 ? $max + 1 : $max, $start == 0 ? $start : $start + 1)
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function reportSubscribersWithStaticIpAndMultistaticIpAll($realm) {
		$this->utility->db_select();
		$this->utility->select('*')
			->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$this->utility->where("RBIPADDRESS IS NOT NULL")
			->where("RBMULTISTATIC IS NOT NULL");
		if (is_null($realm)) {
			$this->utility->order_by($this->COLUMN_RBREALM, 'ASC');
		}
		$query = $this->utility->order_by($this->COLUMN_USERNAME, 'ASC')
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function countSubscribersWithStaticIpAndMultistaticIp($realm) {
		$this->utility->db_select();
		$this->utility->from($this->TABLENAME);
		if (!is_null($realm)) {
			$this->utility->where($this->COLUMN_RBREALM, $realm);
		}
		$count = $this->utility->where("RBIPADDRESS IS NOT NULL")
			->where("RBMULTISTATIC IS NOT NULL")
			->count_all_results();
		return $count;
	}
	public function reportCappedSubscribers($realm, $datestart, $dateend, $start, $max) {
		/*
		$this->utility->db_select();
		$query = $this->utility->select('*')
			->from('TBLVOLUMEUSAGE')
			->where('TOTALOCTETS > HSQVALUE')
			->order_by('USERID', 'ASC')
			->limit($start == 0 ? $max + 1 : $max, $start == 0 ? $start : $start + 1)
			->get();
		if ($query->num_rows() == 0) {
			return false;
		} else {
			$result = $query->result_array();
			$rowCount = $query->num_rows();
			for ($i = 0; $i < $rowCount; $i++) {
				$query2 = $this->utility->select('EVENTDATE')
					->from('TBLTHROTTLEDOWN')
					->where('USERNAME', $result[$i]['USERID'])
					->order_by('EVENTDATE', 'DESC')
					->limit(2, 0)
					->get();
				if ($query2->num_rows() == 0) {
					$result[$i]['EVENTDATE'] = null;
				} else {
					$result2 = $query2->result_array();
					$result[$i]['EVENTDATE'] = $result2[0]['EVENTDATE'];
				}
			}
			return $result;
		}
		*/
		$this->extras->db_select();
		$this->extras->select('id, username, radiuspolicy, upload_octets, download_octets, total_octets, hsqvalue, capped_date')
			->from('capped_users')
			->where('(DATE(capped_date) > DATE("'.date('Y-m-d H:i:s', $datestart).'") or DATE(capped_date) = DATE("'.date('Y-m-d H:i:s', $datestart).'"))')
			->where('(DATE(capped_date) < DATE("'.date('Y-m-d H:i:s', $dateend).'") or DATE(capped_date) = DATE("'.date('Y-m-d H:i:s', $dateend).'"))');
		if (!is_null($realm)) {
			$this->extras->where("instr(username, '".$realm."') > 0");
		}
		$query = $this->extras->order_by('capped_date', 'desc')
			->get();
		return $query->num_rows() == 0 ? false : $query->result_array();
	}
	public function countCappedSubscribers($realm, $datestart, $dateend) {
		/*
		$this->utility->db_select();
		$count = $this->utility->from('TBLVOLUMEUSAGE')
			->where('TOTALOCTETS > HSQVALUE')
			->count_all_results();
		return $count;
		*/
		$this->extras->db_select();
		$this->extras->from('capped_users')
			->where('(DATE(capped_date) > DATE("'.date('Y-m-d H:i:s', $datestart).'") or DATE(capped_date) = DATE("'.date('Y-m-d H:i:s', $datestart).'"))')
			->where('(DATE(capped_date) < DATE("'.date('Y-m-d H:i:s', $dateend).'") or DATE(capped_date) = DATE("'.date('Y-m-d H:i:s', $dateend).'"))');
		if (!is_null($realm)) {
			$this->extras->where("instr(username, '".$realm."') > 0");
		}
		$count = $this->extras->count_all_results();
		return $count;
	}
}